Use Key Performance Indicators (KPIs) to understand business metrics

# Introduction
This is a study note for the course in codecademy on application of SQL on analyzing business metrics.
It focuses on using Key Performance Indicators(KPIs) to understand business metrics
and take the video game, Mineblocks for example.

As a data scientist, when you're not investigating spikes or dips in your data,
you might be building dashboards of KPIs, or key performance indicators for a company.
While every company's metrics are defined slightly differently, the basics are usually very similar.

In this lesson we'll take a look at basic KPIs like Daily Revenue, Daily Active Users, ARPU,
and Retention for a video game, Mineblocks.

This company has two tables, gameplays and purchases.
The purchases table lists all purchases made by players while they're playing Mineblocks.
The gameplays table lists the date and platform for each session a user plays.

# Daily Revenue
Revenue is at the heart of every company. For our first KPI we'll calculate daily revenue.
We calculate the daily sum of the prices in the purchases table grouped by date, taking refunds into account.

select
  date(created_at),
  round(sum(price), 2) as daily_rev
from purchases
where refunded_at is null
group by 1
order by 1;

# Daily Active Users
One of the core metrics to any game is the number people who play each day. That KPI is called Daily Active Users, or DAU.
DAU is defined as the number of unique players seen in-game each day. It's important not to double count users who played multiple times
Likewise, Weekly Active Users (WAU) and Monthly Active Users (MAU) are in the same family.
We'll use the gameplays table to calculate DAU per platform (Android, web, iOS...).

select
  date(created_at),
  platform,
  count(distinct user_id) as dau
from gameplays
group by 1, 2
order by 1, 2;

# Daily ARPPU - Average Revenue Per Purchasing User
Daily ARPPU is defined as the sum of revenue divided by the number of purchasers per day.
We need to understand the purchasing habit of users. Mineblocks, like every freemium game, has two types of users: purchasers and players.

select
  date(created_at),
  round(sum(price)/ count(distinct user_id), 2) as arppu
from purchases
where refunded_at is null
group by 1
order by 1;

# Daily ARPU, Average Revenue Per User
The more popular (and difficult) cousin to Daily ARPPU is Daily ARPU.
Daily ARPU is defined as revenue divided by the number of players, per-day.
ARPPU increases if purchasers are spending more money. ARPU increases if more players are choosing to purchase,
even if the purchase size stays consistent. No one metric can tell the whole story. That's why it's so helpful to have many KPIs on the same dashboard.

Use a with clause to define daily_revenue and then select from it.
One way to easily create and organize temporary results in a query is with CTEs, Common Table Expressions,
also known as with clauses.
The with clauses make it easy to define and use results in a more organized way than subqueries.

with daily_revenue as (
  select
    date(created_at) as dt,
    round(sum(price), 2) as rev
  from purchases
  where refunded_at is null
  group by 1
)
select * from daily_revenue order by dt;


 build the second half of ARPU in our with clause, daily_players, and use both together to create ARPU.

 with daily_revenue as (
  select
    date(created_at) as dt,
    round(sum(price), 2) as rev
  from purchases
  where refunded_at is null
  group by 1
),
daily_players as (
  select
    date(created_at) as dt,
    count(distinct user_id) as players
  from gameplays
  group by 1
)
select
  daily_revenue.dt,
  daily_revenue.rev / daily_players.players
from daily_revenue
  join daily_players using (dt);

we used using instead of on in the join clause. This is a special case join.
When the columns to join have the same name in both tables you can use using instead of on.
Our use of the using keyword is in this case equivalent to this clause:

from daily_revenue
  join daily_players on
    daily_revenue.dt = daily_players.dt;

In the final select statement, daily_revenue.dt represents the date,
while daily_revenue.rev / daily_players.players is the daily revenue divided by the number of players that day.
In full, it represents how much the company is making per player, per day.

# 1 Day Retention
Now let's find out what percent of players are returning to play the next day.
This KPI is called 1 Day Retention. Retention can be defined many different ways,
but we'll stick to the most basic definition.
For all players on Day N, we'll consider them retained if they came back to play again on Day N+1.
1 Day Retention is defined as the number of players who returned the next day divided by the number of
original players, per day. Suppose 10 players played Mineblocks on Dec 10th. If 4 of them play on Dec 11th,
the 1 day retention for Dec 10th is 40%.

Currently the gameplays table is a list of when the user played, and it's not easy to see if any user came back.
By using a self-join, we can make multiple gameplays available on the same row of results.
This will enable us to calculate retention.The power of self-join comes from joining every row to every other row.
This makes it possible to compare values from two different rows in the new result set.
In our case, we'll compare rows that are one date apart from each user.

In order to join a table to itself, it must be aliased so we can access each copy separately.

We aliased gameplays in the query above because in the next step,
 we need to join gameplays to itself so we can get a result selecting [date, user_id, user_id_if_retained].


 select
   date(g1.created_at) as dt,
   g1.user_id,
   g2.user_id
 from gameplays as g1
   join gameplays as g2 on
     g1.user_id = g2.user_id
     and date(g1.created_at) = date(datetime(g2.created_at, '-1 day'))
 order by 1
 limit 100;

 This means "only join rows where the date in g1 is one less than the date in g2",
 which makes it possible to see if users have returned!

 select
  date(g1.created_at) as dt,
--  count(distinct g1.user_id) as total_users,
--  count(distinct g2.user_id) as retained_users
  round(100 * count(distinct g2.user_id) /
    count(distinct g1.user_id)) as retention
from gameplays as g1
  left join gameplays as g2 on
    g1.user_id = g2.user_id
    and date(g1.created_at) = date(datetime(g2.created_at, '-1 day'))
group by 1
order by 1
limit 100;

# Reference
Codeacademy: https://www.codecademy.com/learn/sql-analyzing-business-metrics
